{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["App","props","trainData","BulbasaurData","CharmanderData","SquirtleData","arr","Object","values","flat","shuffle","i","length","im","Image","src","img","width","height","className","alt","type","document","body","appendChild","id","toString","trainModel","a","async","mobilenet","version","alpha","modelMobilenet","classifier","knnClassifier","image","tf","fromPixels","getElementById","inferred","infer","addExample","setState","loading","console","log","state","getNumClasses","array","temporaryValue","randomIndex","currentIndex","Math","floor","random","fromDatasetObject","datasetObject","entries","reduce","result","indexString","data","shape","tensor","Number","loadClassifier","dataset","model","setClassifierDataset","toDatasetObject","Promise","all","map","index","classId","value","Array","from","saveClassifier","getClassifierDataset","datasetOjb","jsonStr","JSON","stringify","handleSaveToPC","jsonData","blob","Blob","url","URL","createObjectURL","link","createElement","download","href","click","onChange","e","file","target","files","trainPred","classify","refs","predmobilenet","activation","predictClass","predclass","mobilenetPred","knnPred","scanned","this","Navbar","bg","variant","expand","Brand","style","color","Toggle","aria-controls","Collapse","Nav","Link","rel","role","fontSize","accept","ref","maxWidth","confidences","toFixed","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.80d17e8f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport * as mobilenet from '@tensorflow-models/mobilenet';\nimport * as knnClassifier from '@tensorflow-models/knn-classifier';\nimport * as tf from '@tensorflow/tfjs';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';/* \nimport SquirtleData from './data/squirtle/squirtle';\nimport CharmanderData from './data/charmander/charmander';\nimport BulbasaurData from './data/bulbasaur/bulbasaur';  */\nimport model from './model.json';\nimport './App.css';\n\n\n//Set true for training the model\nconst TRAIN = false;\n\n/**\n * A simple React App to for classifying Pokemons\n *\n * @author iberatkaya\n */\n\ninterface Props {\n\n};\n\n/**\n * State of the React App\n * \n * @property {string} image The file path of the image\n * @property {boolean} loading To check if the models have loaded\n * @property {mobilenet.MobileNet} modelMobilenet The MobileNet model \n * @property {knnClassifier.KNNClassifier} classifier The KNN Classifier\n * @property {Array<object>} mobilenetPred The predictions of the MobileNet model,\n * @property {object} knnPred The predictions of the KNN model,\n * @property {boolean} scanned To check if the image was scanned\n */\n\ninterface State {\n  image: string,\n  loading: boolean,\n  modelMobilenet: mobilenet.MobileNet | null,\n  mobilenetPred: Array<object>,\n  knnPred: {\n    label: string;\n    classIndex: number;\n    confidences: {\n      [label: string]: number;\n    };\n  } | null,\n  scanned: boolean,\n  classifier: knnClassifier.KNNClassifier | null\n}\n\n/**\n * Types used for downloading and importing the dataset\n */\n\ntype Dataset = {\n  [classId: number]: tf.Tensor<tf.Rank.R2>\n};\n\ntype DatasetObjectEntry = {\n  classId: number,\n  data: number[],\n  shape: [number, number]\n};\n\ntype DatasetObject = DatasetObjectEntry[];\n\nclass App extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      image: '',\n      loading: true,\n      knnPred: null,\n      modelMobilenet: null,\n      mobilenetPred: [],\n      scanned: false,\n      classifier: null\n    }/* \n    if (TRAIN)\n      this.trainData(BulbasaurData, CharmanderData, SquirtleData); */\n  }\n\n  /**\n   * Function inserting the images to the DOM\n   * \n   * @param {object} BulbasaurData The image paths of the images\n   * @param {object} CharmanderData The image paths of the images\n   * @param {object} SquirtleData The image paths of the images\n   */\n\n  trainData = (BulbasaurData: any, CharmanderData: any, SquirtleData: any) => {\n    let arr = [Object.values(BulbasaurData), Object.values(CharmanderData), Object.values(SquirtleData)].flat() as any;\n    this.shuffle(arr);\n    for (let i = 0; i < arr.length; i++) {\n      const im = new Image()\n      im.src = arr[i].img as string;\n      im.width = 500;\n      im.height = 500;\n      im.className = \"hidden\";\n      im.alt = arr[i].type;\n      document.body.appendChild(im);\n      im.id = \"img\" + (i + 1).toString()\n    }\n  }\n\n\n  /**\n   * Function to train the model using the dataset\n   * \n   * @param {object} BulbasaurData The image paths of the images\n   * @param {object} CharmanderData The image paths of the images\n   * @param {object} SquirtleData The image paths of the images\n   */\n\n\n  trainModel = async (BulbasaurData: any, CharmanderData: any, SquirtleData: any) => {\n    const modelMobilenet = await mobilenet.load({ version: 2, alpha: 1 });\n    const classifier = knnClassifier.create();\n    let arr = [Object.values(BulbasaurData), Object.values(CharmanderData), Object.values(SquirtleData)].flat() as Array<any>;\n    for (let i = 0; i < arr.length; i++) {\n      let image = tf.browser.fromPixels(document.getElementById(\"img\" + (i + 1).toString()) as HTMLImageElement);\n      const inferred = modelMobilenet.infer(image);\n    //  console.log((document.getElementById(\"img\" + (i + 1).toString()!) as HTMLImageElement).alt);\n      if ((document.getElementById(\"img\" + (i + 1).toString()!) as HTMLImageElement).alt === \"bulbasaur\")\n        classifier.addExample(inferred, 0);\n      else if ((document.getElementById(\"img\" + (i + 1).toString()!) as HTMLImageElement).alt === \"charmander\")\n        classifier.addExample(inferred, 1);\n      else\n        classifier.addExample(inferred, 2);\n      tf.dispose(image);\n      tf.dispose(inferred);\n    }\n    this.setState({ modelMobilenet, classifier, loading: false }, () => console.log(this.state.classifier?.getNumClasses()));\n  }\n\n  shuffle = (array: Array<any>) => {\n    let currentIndex = array.length;\n    let temporaryValue, randomIndex;\n    while (0 !== currentIndex) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n  };\n\n\n  async componentDidMount() {\n   /*  if (TRAIN) {\n      await this.trainModel(BulbasaurData, CharmanderData, SquirtleData);\n      this.saveClassifier(this.state.classifier!);\n    }\n    else {  */\n      const modelMobilenet = await mobilenet.load();\n      const classifier = this.loadClassifier()\n      this.setState({ classifier, modelMobilenet, loading: false });\n    /*  }  */\n  }\n\n  /**\n   * Function to convert Dataset to Tensor\n   * @param {DatasetObject} datasetObject The dataset object\n   * @returns {Array.<Tensor>} The Tensor array\n   */\n\n  fromDatasetObject = (datasetObject: DatasetObject): Dataset => {\n    return Object.entries(datasetObject).reduce((result: Dataset, [indexString, { data, shape }]) => {\n      const tensor = tf.tensor2d(data, shape);\n      const index = Number(indexString);\n      result[index] = tensor;\n      return result;\n    }, {});\n  }\n\n  /**\n * Function to load the classifier\n * @returns {knnClassifier.KNNClassifier} The classifier\n */\n\n  loadClassifier = (): knnClassifier.KNNClassifier => {\n    const classifier: knnClassifier.KNNClassifier = new knnClassifier.KNNClassifier();\n    // @ts-ignore\n    const dataset = this.fromDatasetObject(model);\n    classifier.setClassifierDataset(dataset);\n    return classifier;\n  }\n\n  /**\n   * Function to convert Dataset to Tensor\n   * @param {Dataset} dataset The dataset\n   * @returns {Promise<DatasetObject>} The dataset object\n   */\n\n  toDatasetObject = async (dataset: Dataset): Promise<DatasetObject> => {\n    const result: DatasetObject = await Promise.all(\n      Object.entries(dataset).map(async ([classId, value], index) => {\n        const data = await value.data();\n        return {\n          classId: Number(classId),\n          data: Array.from(data),\n          shape: value.shape\n        };\n      })\n    );\n    return result;\n  };\n\n  /**\n   * Function to save the classifier\n   * @param {knnClassifier.KNNClassifier} classifier The KNN Classifier\n   */\n\n\n  saveClassifier = async (classifier: knnClassifier.KNNClassifier) => {\n    const dataset = classifier.getClassifierDataset();\n    const datasetOjb: DatasetObject = await this.toDatasetObject(dataset);\n    const jsonStr = JSON.stringify(datasetOjb);\n    this.handleSaveToPC(jsonStr);\n  }\n\n  /**\n   * Downlaods the model.json\n   * @param {jsonData} string The JSON Data\n   */\n\n  handleSaveToPC = (jsonData: string) => {\n    const fileData = jsonData;\n    const blob = new Blob([fileData], { type: \"text/plain\" });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.download = 'model.json';\n    link.href = url;\n    link.click();\n  }\n\n  onChange = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    let file = URL.createObjectURL(e.target.files![0]);\n    this.setState({ image: file })\n  }\n\n  /**\n   * The prediction used while training\n   */\n\n  trainPred = async () => {\n    const modelMobilenet = this.state.modelMobilenet;\n    const classifier = this.state.classifier;\n    const predmobilenet = await modelMobilenet!.classify(this.refs.image as HTMLImageElement);\n    const activation = modelMobilenet!.infer(this.refs.image as HTMLImageElement);\n    const predclass = await classifier!.predictClass(activation);\n    this.setState({ mobilenetPred: predmobilenet, knnPred: predclass, scanned: true });\n  }\n\n\n  render() {\n    return (\n      <div>\n        <Navbar bg=\"success\" variant=\"dark\" expand=\"lg\">\n          <Navbar.Brand style={{ color: '#eee' }} href=\"#home\">Pokemon Classification</Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n          <Navbar.Collapse id=\"basic-navbar-nav\">\n            <Nav className=\"ml-auto\">\n              <Nav.Link style={{ color: '#eee' }} target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/iberatkaya\">GitHub</Nav.Link>\n              <Nav.Link style={{ color: '#eee' }} target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://linkedin.com/in/ibrahim-berat-kaya\">LinkedIn</Nav.Link>\n              <Nav.Link style={{ color: '#eee' }} target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.npmjs.com/package/@tensorflow-models/mobilenet\">MobileNet</Nav.Link>\n            </Nav>\n          </Navbar.Collapse>\n        </Navbar>\n\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-lg-12 text-center\">\n              <h2 className=\"m-3\">Pokemon Classification</h2>\n            </div>\n          </div>\n        </div>\n\n        {this.state.loading ?\n          <div className=\"container text-center\">\n            <div className=\"spinner-border text-danger mb-3\" role=\"status\">\n            </div>\n            <div className=\"lead\">Loading Models...</div>\n          </div>\n          :\n          <div>\n            {\n              this.state.image === '' ?\n                <div className=\"container justify-center align-items-center\">\n                  <div className=\"text-center\">\n                    <p className=\"lead\" style={{ fontSize: '1.1rem' }}>Upload your Pokemon image to classify it. Images are clasified with Tensorflow.js and MobileNet using transfer learning. Currently only Bulbasaur, Charmander, and Squirtle are classified. </p>\n                  </div>\n                  <form className={\"form\"}>\n                    <div className=\"input-group\">\n                      <div className=\"input-group-prepend\">\n                        <span className=\"input-group-text\">Upload</span>\n                      </div>\n                      <div className=\"custom-file\">\n                        <input value={this.state.image} onChange={this.onChange} accept=\"image/*\" type=\"file\" className=\"custom-file-input\" />\n                        <label className=\"custom-file-label\">Choose image</label>\n                      </div>\n                    </div>\n                  </form>\n                </div>\n                :\n                <div className=\"container-fluid\">\n                  <div className=\"row\">\n                    <div className=\"col-lg-12\">\n                      <div className=\"text-center\">\n                        <img alt=\"input\" ref=\"image\" style={{ maxWidth: '60%' }} className=\"img-responsive\" src={this.state.image}></img>\n                      </div>\n                      <p></p> {/* Moves button to bottom of image */}\n                      {!this.state.scanned ?\n                        <div className=\"text-center mb-2\">\n                          <button className=\"btn btn-outline-primary\" onClick={async () => {\n                            if (TRAIN) {\n                              this.trainPred();\n                            }\n                            else {\n                              const modelMobilenet = this.state.modelMobilenet;\n                              const classifier = this.state.classifier;\n                              const predmobilenet = await modelMobilenet!.classify(this.refs.image as HTMLImageElement);\n                              const activation = modelMobilenet!.infer(this.refs.image as HTMLImageElement);\n                              const predclass = await classifier!.predictClass(activation);\n                              console.log(predclass);\n                              this.setState({ mobilenetPred: predmobilenet, knnPred: predclass, scanned: true });\n                            }\n                          }}>Classify</button>\n                        </div>\n                        :\n                        <div className=\"container mb-2\">\n                          <ul className=\"list-group mb-4\">\n                            <li className=\"list-group-item disabled\">KNN Predictions</li>\n                            <li className=\"list-group-item\">Bulbasaur - Probability: {(this.state.knnPred!.confidences[\"0\"] * 100).toFixed(2)}%</li>\n                            <li className=\"list-group-item\">Charmander - Probability: {(this.state.knnPred!.confidences[\"1\"] * 100).toFixed(2)}%</li>\n                            <li className=\"list-group-item\">Squirtle - Probability: {(this.state.knnPred!.confidences[\"2\"] * 100).toFixed(2)}%</li>\n                          </ul>\n                          <div className=\"text-center\">\n                            <button className=\"btn btn-outline-primary\" onClick={async () => {\n                              this.setState({ image: '', mobilenetPred: [], knnPred: null, scanned: false })\n                            }}>Classify New Image</button>\n                          </div>\n                        </div>\n                      }\n                    </div>\n                  </div>\n                </div>\n            }\n          </div>\n        }\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}